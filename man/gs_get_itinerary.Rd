% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gs_get_itinerary.R
\name{gs_get_itinerary}
\alias{gs_get_itinerary}
\title{Calculate an itinerary between two locations}
\usage{
gs_get_itinerary(
  start,
  end,
  intermediates = NULL,
  profile = "car",
  optimization = "fastest",
  time_unit = "minute",
  distance_unit = "kilometer",
  by_feature = FALSE
)
}
\arguments{
\item{start}{a vector of two \code{numeric} values. The longitude and the latitude
of the location of the departure defined in the WGS84 system.
The location must belong to Mainland France.}

\item{end}{a vector of two \code{numeric} values. The longitude and the latitude
of the location of the arrival defined in the WGS84 system.
The location must belong to Mainland France.}

\item{intermediates}{a \code{list} of two-numeric vectors (optional). Intermediate
points that the route must reach.}

\item{profile}{a \code{character} of length 1. The means of transport used to
calculate the itinerary. Possible values: \code{car} and \code{pedestrian}.}

\item{optimization}{a \code{character} of length 1. Possible values: \code{fastest}
and \code{shortest}.}

\item{time_unit}{a \code{character} of length 1. The time unit of the estimated
duration. Possible values: \code{hour}, \code{minute} and \code{second}.}

\item{distance_unit}{a \code{character} of length 1. The distance unit of the
estimated distance. Possible values: \code{meter} and \code{kilometer}.}

\item{by_feature}{a \code{logical}. If \code{FALSE} (default) returns the itinerary as
one single \verb{sf LINESTRING}. If \code{TRUE} returns the itinerary as a collection
of \verb{sf LINESTRING}, each portion corresponding to a unique road.}
}
\value{
The itinerary as a \verb{sf LINESTRING} object.
}
\description{
Queries the Geoservices (IGN) API using the \strong{/itineraire} endpoint to
calculate an itinerary between two French (mainland) locations. This service
uses the IGN BD TOPOÂ® OSRM to get road data.

The API documentation is available \href{https://www.geoportail.gouv.fr/depot/swagger/itineraire.html#/Utilisation/routeItineraire-get}{here}.
}
\examples{
\dontrun{
# Get coordinates of Ganges cityhall ----
 
ganges <- gs_get_coordinates(
  query    = "Mairie de Ganges", 
  index    = "poi", 
  category = "mairie",
  limit    = 1
)

ganges <- c(ganges$"longitude", ganges$"latitude")


# Get coordinates of Ales cityhall ----

ales <- gs_get_coordinates(
  query    = "Mairie d'Ales", 
  index    = "poi", 
  category = "mairie",
  limit    = 1
)

ales <- c(ales$"longitude", ales$"latitude")


# Calculate fastest itinerary between the two cities ----

itinerary <- gs_get_itinerary(
  start = ganges,
  end   = ales)


# Same but with information of each road ----

itinerary <- gs_get_itinerary(
  start      = ganges, 
  end        = ales, 
  by_feature = TRUE)


# Get coordinates of Aigremont cityhall ----

aigremont <- gs_get_coordinates(
  query    = "Mairie d'Aigremont", 
  index    = "poi", 
  category = "mairie",
  postcode = 30350,
  limit    = 1
)

aigremont <- c(aigremont$"longitude", aigremont$"latitude")


# Calculate fastest itinerary between the two cities... ----
# ...with a stop at Aigremont, Gard

itinerary <- gs_get_itinerary(
  start         = ganges, 
  end           = ales, 
  intermediates = list(aigremont)
)


# Example for hiking (part of GR70) ----

departure <- gs_get_coordinates(
  query    = "Le Pont de Barre Florac",
  index    = "poi",
  category = "pont"
)

departure <- c(departure$"longitude", departure$"latitude")

arrival <- gs_get_coordinates(
  query    = "Chateau de Saint-Julien-d'Arpaon",
  index    = "poi",
  category = "ruines"
)

arrival <- c(arrival$"longitude", arrival$"latitude")

itinerary <- gs_get_itinerary(
  start         = departure, 
  end           = arrival, 
  profile       = "pedestrian",
  optimization  = NULL,
  intermediates = list(
    c(3.65052, 44.303574)
  )
)
}
}
